// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: transfers.sql

package db

import (
	"context"
	"database/sql"
)

const createTransfers = `-- name: CreateTransfers :execresult
INSERT INTO transfers (from_account_id, to_account_id, amount) VALUE (?, ?, ?)
`

type CreateTransfersParams struct {
	FromAccountID int32
	ToAccountID   int32
	Amount        int64
}

func (q *Queries) CreateTransfers(ctx context.Context, arg CreateTransfersParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTransfers, arg.FromAccountID, arg.ToAccountID, arg.Amount)
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, from_account_id, to_account_id, amount, created_at FROM TRANSFERS WHERE id = ?
`

func (q *Queries) GetTransfer(ctx context.Context, id int32) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransfersFrom = `-- name: ListTransfersFrom :many
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers WHERE from_account_id = ? LIMIT ? OFFSET ?
`

type ListTransfersFromParams struct {
	FromAccountID int32
	Limit         int32
	Offset        int32
}

func (q *Queries) ListTransfersFrom(ctx context.Context, arg ListTransfersFromParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfersFrom, arg.FromAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransfersTo = `-- name: ListTransfersTo :many
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers WHERE to_account_id = ? LIMIT ? OFFSET ?
`

type ListTransfersToParams struct {
	ToAccountID int32
	Limit       int32
	Offset      int32
}

func (q *Queries) ListTransfersTo(ctx context.Context, arg ListTransfersToParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfersTo, arg.ToAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectLastIntroIdTransfer = `-- name: SelectLastIntroIdTransfer :one
select id, from_account_id, to_account_id, amount, created_at FROM transfers WHERE id = last_insert_id()
`

func (q *Queries) SelectLastIntroIdTransfer(ctx context.Context) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, selectLastIntroIdTransfer)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
