// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: transfers.sql

package db

import (
	"context"
)

const createTransfers = `-- name: CreateTransfers :exec
INSERT INTO transfers (from_account_id, to_account_id, amount) VALUE (?, ?, ?)
`

type CreateTransfersParams struct {
	FromAccountID int32
	ToAccountID   int32
	Amount        int64
}

func (q *Queries) CreateTransfers(ctx context.Context, arg CreateTransfersParams) error {
	_, err := q.db.ExecContext(ctx, createTransfers, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	return err
}

const listTransfersFrom = `-- name: ListTransfersFrom :many
SELECT id, from_account_id, to_account_id, amount, created_at FROM transfers WHERE from_account_id = ?
`

func (q *Queries) ListTransfersFrom(ctx context.Context, fromAccountID int32) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransfersFrom, fromAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
